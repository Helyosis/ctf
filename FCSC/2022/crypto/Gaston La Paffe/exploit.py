from json import loads
import numpy
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from poly_op import R

def poly_div(p1, p2):
    qx, rx = numpy.polynomial.polynomial.polydiv(p1, p2)
    return qx, rx

with open("output.txt", "r") as f:
    pk = loads(f.readline())
    signatures = loads(f.readline())
    flag = loads(f.readline())

s1 = None
for sig in signatures:
    y1 = R(sig["y1"])
    z1 = R(sig["z1"])
    z2 = R(sig["z2"])
    c  = R(sig["c"])
    
    s1c = z1 - y1

    s1_ = s1c / c
    if s1 is None:
        s1 = s1_
    else:
        assert s1 == s1_

a = R(pk["a"])
t = R(pk["t"])

s2 = t - a * s1

iv = bytes.fromhex(flag["iv"])
enc = bytes.fromhex(flag["enc"])

key = SHA256.new(str(list(s1)).encode() + str(list(s2)).encode()).digest()
E = AES.new(key, AES.MODE_CBC, iv = iv)
print(E.decrypt(enc))